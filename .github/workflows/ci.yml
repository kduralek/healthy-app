name: CI/CD Pipeline

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node-deps

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format -- --check

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node-deps

      - name: Run Astro check
        run: npm run astro check

  unit-tests:
    name: Unit Tests
    needs: [lint-and-format, type-check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node-deps

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  build:
    name: Build Application
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node-deps

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    environment: integration
    needs: [unit-tests]
    env:
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
      E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
      E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
      OPENROUTER_API_KEY: test-key-mock
      USE_MOCK_OPENROUTER: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and Dependencies
        uses: ./.github/actions/setup-node-deps

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  status-comment:
    name: Post Status Comment
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, unit-tests, build, e2e-tests]
    if: github.event_name == 'pull_request' && success()
    permissions:
      pull-requests: write
    steps:
      - name: Post success comment
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            
            const comment = `âœ… **CI Pipeline Passed Successfully!**
            
            All checks have completed successfully:
            - âœ… Lint and Format Check
            - âœ… TypeScript Type Check  
            - âœ… Unit Tests with Coverage
            - âœ… Build Application
            - âœ… E2E Tests
            
            Your pull request is ready for review! ðŸš€`;
            
            // Check if we already have a status comment
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pr_number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('CI Pipeline')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: comment
              });
            }
