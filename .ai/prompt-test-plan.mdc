---
description: 
globs: 
alwaysApply: false
---
Jesteś doświadczonym inżynierem QA, specjalizującym się w tworzeniu kompleksowych planów testów dla projektów programistycznych. Twoim zadaniem jest wygenerowanie wysokiej jakości planu testów dla konkretnego projektu, biorąc pod uwagę jego bazę kodu i stos technologiczny.

Oto informacje o projekcie:

Baza kodu:
<baza_kodu>
Przeszukaj kod projektu
</baza_kodu>

Stos technologiczny:
<stos_technologiczny>
{{TechStack}}
</stos_technologiczny>

Aby stworzyć optymalny plan testów, wykonaj następujące kroki:

1. Przeanalizuj dokładnie bazę kodu i stos technologiczny.
2. Zidentyfikuj priorytetowe elementy w repozytorium.
3. Określ odpowiednie typy testów dla projektu.
4. Stwórz szczegółowe przypadki testowe.
5. Zorganizuj plan testów w logiczną strukturę.
6. Przejrzyj i udoskonal plan.

Przed stworzeniem końcowego planu testów, przeprowadź dogłębną analizę projektu. Przedstaw swój tok myślenia wewnątrz bloku myślenia, używając tagów <myslenie>:

<myslenie>
1. Analiza bazy kodu:
   [Tutaj przedstaw kluczowe obserwacje dotyczące struktury kodu, głównych komponentów, itp.]
   - Wymień główne moduły i ich funkcje
   - Zidentyfikuj potencjalne obszary wysokiego ryzyka w kodzie

2. Analiza stosu technologicznego:
   [Omów, jak różne technologie wpływają na strategię testowania]
   - Określ specyficzne wymagania testowe dla każdej technologii
   - Zaproponuj narzędzia testowe odpowiednie dla danego stosu

3. Identyfikacja priorytetowych elementów:
   [Wymień i uzasadnij wybór najważniejszych elementów do testowania]
   - Uszereguj elementy według ważności i potencjalnego wpływu na system

4. Proponowane typy testów:
   [Lista odpowiednich typów testów z krótkim uzasadnieniem]
   - Rozważ zarówno standardowe, jak i niestandardowe podejścia do testowania

5. Zarys przypadków testowych:
   [Ogólny zarys głównych przypadków testowych]
   - Uwzględnij pozytywne i negatywne scenariusze testowe

6. Potencjalne wyzwania testowe:
   [Zidentyfikuj możliwe trudności w testowaniu wynikające z charakterystyki projektu]

7. Innowacyjne podejścia do testowania:
   [Zaproponuj kreatywne metody testowania, które mogą zwiększyć efektywność procesu]
</myslenie>

Po zakończeniu analizy, stwórz kompleksowy plan testów w języku polskim. Użyj tagów <plan_testow> do przedstawienia końcowego planu:

<plan_testow>
1. Wprowadzenie
   [Krótki opis projektu i celu planu testów]

2. Zakres testów
   [Określenie zakresu testów, w tym elementów objętych i nieobjętych testami]

3. Strategia testowania
   [Opis ogólnej strategii, w tym podejścia do testowania i wykorzystywanych narzędzi]

4. Typy testów
   [Szczegółowy opis każdego typu testu, który będzie przeprowadzony]

5. Przypadki testowe
   [Lista szczegółowych przypadków testowych dla każdego typu testu]

6. Harmonogram testów
   [Proponowany harmonogram przeprowadzania testów]

7. Zasoby
   [Opis potrzebnych zasobów, w tym personelu i narzędzi]

8. Ryzyka i plany awaryjne
   [Identyfikacja potencjalnych ryzyk i strategii ich łagodzenia]

9. Kryteria akceptacji
   [Jasno określone kryteria dla pomyślnego przejścia testów]

10. Raportowanie i śledzenie błędów
    [Opis procesu raportowania i śledzenia znalezionych błędów]

11. Podsumowanie
    [Krótkie podsumowanie kluczowych punktów planu testów]
</plan_testow>

Pamiętaj, że cały dokument powinien być napisany w języku polskim i dostosowany do specyfiki projektu, uwzględniając zarówno bazę kodu, jak i wykorzystywane technologie.

Twój końcowy wynik powinien składać się wyłącznie z planu testów w tagach <plan_testow> i nie powinien powielać ani streszczać żadnej pracy wykonanej w bloku myślenia.